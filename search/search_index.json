{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HECM:Hollistic evaluation of Coding Models","text":"<p>HECM is a library meant to hollistically evaluate the agentic capbilities of coding LLMs. It consists of 2 primary features:</p> <ol> <li>Mining data from Github issues to create agentic benchmarks for evaluating the agenting capabilities of coding models to solve problems.</li> <li>An evaluation harness with a flexible API, designed to evaluate agents and models by executing corresponding testcases both in sandboxed and un-sandboxed manner.</li> </ol>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/xynehq/hecm\ncd hecm\nuv pip install -r pyproject.toml --group dev\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#generating-coding-agent-evaluation-data-for-a-given-repository","title":"Generating Coding Agent evaluation data for a given repository","text":"<pre><code>import os\n\nfrom dotenv import load_dotenv\n\nfrom hecm.dataset_generation import CodingAgentDataGenerator\nfrom hecm.dataset_generation.utils import load_issues\n\nload_dotenv()\n\nanalyzer = CodingAgentDataGenerator(\n    repo_owner=\"juspay\",\n    repo_name=\"hyperswitch\",\n    github_token=os.getenv(\"GITHUB_TOKEN\"),\n    gold_patch_ignore_dirs=[\n        \".github\",\n        \".devcontainer\",\n        \"api-reference\",\n        \"cypress-tests\",\n        \"cypress-test-files\",\n        \"docs\",\n    ],\n    test_dirs=[\"cypress-tests\", \"cypress-test-files\"],\n)\nissues = analyzer.generate_issues(\n    save_to=\"data/issues/juspay___hyperswitch.json\"\n)\nissues_with_linked_prs = analyzer.generate_linked_prs(\n    issues, save_to=\"data/issues/juspay___hyperswitch.json\"\n)\ndata_points = analyzer.generate_data_points(issues_with_linked_prs)\ndata_points.export_to_huggingface(\n    \"juspay/hyperswitch\", append_to_dataset=False\n)\n</code></pre>"},{"location":"#running-the-evaluation-harness","title":"Running the evaluation harness","text":"<pre><code>from hecm.eval_harness.agent import ClaudeCodeProxyAgent\nfrom hecm.eval_harness.evaluation import Evaluator\nfrom hecm.eval_harness.test_execution import JuspayHyperswitchLocalTestExecutor\n\nevaluator = Evaluator(\n    agent=ClaudeCodeProxyAgent(),\n    executor=JuspayHyperswitchLocalTestExecutor(),\n)\nevaluator.evaluate(\n    dataset=\"juspay/hyperswitch\", # \ud83e\udd17 address of the dataset\n    split=\"train\",\n    max_data_points=8,\n    result_save_path=\"results.json\",\n)\n</code></pre>"},{"location":"api_reference/dataset_generation/","title":"Dataset Generation","text":""},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas","title":"<code>hecm.dataset_generation.schemas</code>","text":""},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.PRComment","title":"<code>PRComment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A comment on a PR. Args:     comment_body (str): The body of the comment.     diff_hunk (Optional[str]): The diff hunk of the comment.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The hints text.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.LinkedPR","title":"<code>LinkedPR</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A linked PR.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>The number of the PR.</p> required <code>title</code> <code>str</code> <p>The title of the PR.</p> required <code>body</code> <code>Optional[str]</code> <p>The body of the PR.</p> required <code>base_commit</code> <code>str</code> <p>The base commit of the PR.</p> required <code>created_at</code> <code>str</code> <p>The creation date of the PR.</p> required <code>comments</code> <code>List[PRComment]</code> <p>The comments on the PR.</p> required"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.GithubIssue","title":"<code>GithubIssue</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Github issue.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>int</code> <p>The number of the issue.</p> required <code>title</code> <code>str</code> <p>The title of the issue.</p> required <code>body</code> <code>Optional[str]</code> <p>The body of the issue.</p> required <code>state</code> <code>Literal['open', 'closed']</code> <p>The state of the issue.</p> required <code>url</code> <code>str</code> <p>The URL of the issue.</p> required <code>linked_pr</code> <code>Optional[LinkedPR]</code> <p>The linked PR for the issue.</p> required"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.CodingAgentDataPoint","title":"<code>CodingAgentDataPoint</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A data point for a coding agent evaluation. Args:     repo (str): The repository of the data point.     instance_id (str): The instance ID of the data point.     problem_statement (str): The problem statement of the data point.     patch (str): The patch of the data point.     test_patch (str): The test patch of the data point.     created_at (str): The creation date of the data point.     hints_text (str): The hints text of the data point.     test_instructions (Optional[str]): The test instructions of the data point.     base_commit (str): The base commit of the data point.     script_to_run_tests (str): The script to run tests of the data point.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.CodingAgentDataset","title":"<code>CodingAgentDataset</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A dataset of coding agent evaluation data points.</p> <p>Parameters:</p> Name Type Description Default <code>data_points</code> <code>List[CodingAgentDataPoint]</code> <p>The data points in the dataset.</p> required"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.CodingAgentDataset.export_to_csv","title":"<code>export_to_csv(filename)</code>","text":"<p>Export the dataset to a CSV file. Args:     filename (str): The name of the file to export to.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.schemas.CodingAgentDataset.export_to_huggingface","title":"<code>export_to_huggingface(dataset_name, append_to_dataset=False)</code>","text":"<p>Export the dataset to a Hugging Face dataset. Args:     dataset_name (str): The name of the dataset to export to.     append_to_dataset (bool): Whether to append the dataset to an existing dataset.</p> <p>Returns:</p> Name Type Description <code>Dataset</code> <code>Dataset</code> <p>The dataset.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator","title":"<code>hecm.dataset_generation.generator</code>","text":""},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator","title":"<code>CodingAgentDataGenerator</code>","text":"<p>Generator for coding agent evaluation data.</p> <p>Parameters:</p> Name Type Description Default <code>repo_owner</code> <code>str</code> <p>The owner of the repository.</p> required <code>repo_name</code> <code>str</code> <p>The name of the repository.</p> required <code>github_token</code> <code>Optional[str]</code> <p>The GitHub token to use for authentication.</p> <code>None</code> <code>gold_patch_ignore_dirs</code> <code>List[str]</code> <p>The directories to ignore in the gold patch.</p> <code>['.github']</code> <code>test_dirs</code> <code>List[str]</code> <p>The directories to keep in the test patch.</p> <code>[]</code>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.get_linked_prs","title":"<code>get_linked_prs(url)</code>","text":"<p>Get the linked PRs for a given issue.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the issue.</p> required <p>Returns:</p> Type Description <code>Union[List[int], None]</code> <p>Union[List[int], None]: The linked PRs.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.fetch_pr_data","title":"<code>fetch_pr_data(pr_number)</code>","text":"<p>Fetch the data for a given PR.</p> <p>Parameters:</p> Name Type Description Default <code>pr_number</code> <code>int</code> <p>The number of the PR.</p> required <p>Returns:</p> Name Type Description <code>LinkedPR</code> <code>LinkedPR</code> <p>The data for the given PR.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.get_patch","title":"<code>get_patch(pr_number)</code>","text":"<p>Get the patch for a given PR.</p> <p>Parameters:</p> Name Type Description Default <code>pr_number</code> <code>int</code> <p>The number of the PR.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Tuple[str, str]: The gold patch and the test patch.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.fetch_issues","title":"<code>fetch_issues(state='closed', max_issues=None)</code>","text":"<p>Helper function to fetch issues by state with pagination.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>str</code> <p>The state of the issues to fetch.</p> <code>'closed'</code> <code>max_issues</code> <code>Optional[int]</code> <p>The maximum number of issues to fetch.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[GithubIssue]</code> <p>List[GithubIssue]: The issues.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.generate_issues","title":"<code>generate_issues(issue_state='closed', max_issues=None, save_to=None)</code>","text":"<p>Generate issues for a given repository.</p> <p>Parameters:</p> Name Type Description Default <code>issue_state</code> <code>str</code> <p>The state of the issues to fetch.</p> <code>'closed'</code> <code>max_issues</code> <code>Optional[int]</code> <p>The maximum number of issues to fetch.</p> <code>None</code> <code>save_to</code> <code>Optional[PathLike]</code> <p>The path to save the issues to.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[GithubIssue]</code> <p>List[GithubIssue]: The issues.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.generate_linked_prs","title":"<code>generate_linked_prs(issues, max_workers=10, save_to=None)</code>","text":"<p>Generate linked PRs for a given issues.</p> <p>Parameters:</p> Name Type Description Default <code>issues</code> <code>List[GithubIssue]</code> <p>The issues to generate linked PRs for.</p> required <code>max_workers</code> <code>int</code> <p>The maximum number of workers to use.</p> <code>10</code> <code>save_to</code> <code>Optional[PathLike]</code> <p>The path to save the linked PRs to.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[GithubIssue]</code> <p>List[GithubIssue]: The linked PRs.</p>"},{"location":"api_reference/dataset_generation/#hecm.dataset_generation.generator.CodingAgentDataGenerator.generate_data_points","title":"<code>generate_data_points(issues, max_workers=10)</code>","text":"<p>Generate data points for a given issues.</p> <p>Parameters:</p> Name Type Description Default <code>issues</code> <code>List[GithubIssue]</code> <p>The issues to generate data points for.</p> required <code>max_workers</code> <code>int</code> <p>The maximum number of workers to use.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>CodingAgentDataset</code> <code>CodingAgentDataset</code> <p>The data points.</p>"},{"location":"api_reference/eval_harness/agent/","title":"Agent","text":""},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.base","title":"<code>hecm.eval_harness.agent.base</code>","text":""},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.base.AgentResponse","title":"<code>AgentResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response from the agent.</p> <p>Attributes:</p> Name Type Description <code>patch</code> <code>str</code> <p>The patch generated by the agent.</p> <code>files_changed</code> <code>list[str]</code> <p>The files changed by the agent.</p> <code>success</code> <code>bool</code> <p>Whether the agent was successful.</p> <code>execution_time</code> <code>float</code> <p>The execution time of the agent.</p> <code>log_file</code> <code>str</code> <p>The log file of the agent.</p> <code>stdout</code> <code>str</code> <p>The stdout of the agent.</p> <code>stderr</code> <code>str</code> <p>The stderr of the agent.</p> <code>exit_code</code> <code>int</code> <p>The exit code of the agent.</p>"},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent","title":"<code>hecm.eval_harness.agent.claude_code_agent</code>","text":""},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent.ClaudeCodeProxyAgent","title":"<code>ClaudeCodeProxyAgent</code>","text":"<p>               Bases: <code>BaseAgent</code></p> <p>ClaudeCodeProxyAgent is a agent that uses run Claude Code with a proxy server to get the response from a model remotely hosted using vLLM.</p> <p>Example</p> <pre><code>agent = ClaudeCodeProxyAgent()\nresponse = agent.get_agent_response(data_point, start_proxy=True, stop_proxy=True)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>proxy_repo_path</code> <code>str | PathLike | None</code> <p>The path to the proxy repository.</p> <code>None</code> <code>proxy_repo_url</code> <code>str</code> <p>The URL of the proxy repository.</p> <code>'https://github.com/fuergaosi233/claude-code-proxy'</code> <code>anthropic_base_url</code> <code>str</code> <p>The base URL of the Anthropic API.</p> <code>'http://localhost:8082'</code> <code>anthropic_api_key</code> <code>str</code> <p>The API key for the Anthropic API.</p> <code>'dummy'</code> <p>Attributes:</p> Name Type Description <code>proxy_repo_path</code> <code>Path</code> <p>The path to the proxy repository.</p> <code>proxy_repo_url</code> <code>str</code> <p>The URL of the proxy repository.</p> <code>anthropic_base_url</code> <code>str</code> <p>The base URL of the Anthropic API.</p> <code>anthropic_api_key</code> <code>str</code> <p>The API key for the Anthropic API.</p> <code>openai_base_url</code> <code>str</code> <p>The base URL of the OpenAI API.</p> <code>openai_api_key</code> <code>str</code> <p>The API key for the OpenAI API.</p> <code>openai_model</code> <code>str</code> <p>The model to use for the OpenAI API.</p> <code>big_model</code> <code>str | None</code> <p>The model to use for the Big Model.</p> <code>small_model</code> <code>str | None</code> <p>The model to use for the Small Model.</p> <code>middle_model</code> <code>str | None</code> <p>The model to use for the Middle Model.</p> <code>auto_clone</code> <code>bool</code> <p>Whether to auto clone the proxy repository.</p> <code>proxy_startup_wait</code> <code>int</code> <p>The wait time for the proxy to start.</p> <code>log_dir</code> <code>str | PathLike | None</code> <p>The directory to save the logs.</p> <code>debug</code> <code>bool</code> <p>Whether to enable debug logging.</p>"},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent.ClaudeCodeProxyAgent.start_proxy","title":"<code>start_proxy()</code>","text":"<p>Start the proxy server for the agent response.</p>"},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent.ClaudeCodeProxyAgent.stop_proxy","title":"<code>stop_proxy()</code>","text":"<p>Stop the proxy server for the agent response.</p>"},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent.ClaudeCodeProxyAgent.get_agent_response","title":"<code>get_agent_response(data_point, start_proxy=True, stop_proxy=True)</code>","text":"<p>Get the agent response for the given data point.</p> <p>Parameters:</p> Name Type Description Default <code>data_point</code> <code>CodingAgentDataPoint</code> <p>The data point to get the agent response for.</p> required <code>start_proxy</code> <code>bool</code> <p>Whether to start the proxy server for the agent response.</p> <code>True</code> <code>stop_proxy</code> <code>bool</code> <p>Whether to stop the proxy server for the agent response.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>AgentResponse</code> <code>AgentResponse</code> <p>The agent response for the given data point.</p>"},{"location":"api_reference/eval_harness/agent/#hecm.eval_harness.agent.claude_code_agent.setup_logging","title":"<code>setup_logging(log_dir, debug=False)</code>","text":"<p>Setup logging configuration for <code>ClaudeCodeProxyAgent</code>.</p> <p>Parameters:</p> Name Type Description Default <code>log_dir</code> <code>Path</code> <p>The directory to save the logs.</p> required <code>debug</code> <code>bool</code> <p>Whether to enable debug logging.</p> <code>False</code> <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: The logger for <code>ClaudeCodeProxyAgent</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>log_dir</code> is not a valid path.</p>"},{"location":"api_reference/eval_harness/evaluation/","title":"Evaluation","text":""},{"location":"api_reference/eval_harness/evaluation/#hecm.eval_harness.evaluation.evaluator","title":"<code>hecm.eval_harness.evaluation.evaluator</code>","text":""},{"location":"api_reference/eval_harness/evaluation/#hecm.eval_harness.evaluation.evaluator.Evaluator","title":"<code>Evaluator</code>","text":"<p>Evaluator class that evaluates the performance of the agent on the dataset.</p> <p>Example</p> <pre><code>from hecm.eval_harness.agent import ClaudeCodeProxyAgent\nfrom hecm.eval_harness.evaluation import Evaluator\nfrom hecm.eval_harness.test_execution import JuspayHyperswitchLocalTestExecutor\n\nevaluator = Evaluator(\n    agent=ClaudeCodeProxyAgent(),\n    executor=JuspayHyperswitchLocalTestExecutor(),\n)\nevaluator.evaluate(\n    dataset=\"juspay/hyperswitch\",\n    split=\"train\",\n    max_data_points=8,\n    result_save_path=\"results2.json\",\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>agent</code> <code>BaseAgent</code> <p>The agent to evaluate. Must implement the <code>get_agent_response</code> method.</p> required <code>executor</code> <code>BaseLocalExecutor</code> <p>The executor to use for the evaluation. Must implement the <code>execute</code> method.</p> required"},{"location":"api_reference/eval_harness/evaluation/#hecm.eval_harness.evaluation.evaluator.Evaluator.evaluate","title":"<code>evaluate(dataset, split='train', max_data_points=None, result_save_path=None)</code>","text":"<p>Evaluate the agent on the dataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>str</code> <p>The dataset to evaluate on.</p> required <code>split</code> <code>str</code> <p>The split of the dataset to evaluate on.</p> <code>'train'</code> <code>max_data_points</code> <code>int</code> <p>The maximum number of data points to evaluate on.</p> <code>None</code> <code>result_save_path</code> <code>PathLike | None</code> <p>The path to save the evaluation results.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[EvaluationResult]: The evaluation results.</p>"},{"location":"api_reference/eval_harness/test_execution/","title":"Test Execution","text":""},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.base","title":"<code>hecm.eval_harness.test_execution.base</code>","text":""},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.base.CommandExecutionResult","title":"<code>CommandExecutionResult</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Result of executing a command.</p> <p>Attributes:</p> Name Type Description <code>command</code> <code>str</code> <p>The command that was executed.</p> <code>stdout</code> <code>str</code> <p>The stdout of the command.</p> <code>stderror</code> <code>str</code> <p>The stderr of the command.</p> <code>exit_code</code> <code>int</code> <p>The exit code of the command.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.base.EvaluationResult","title":"<code>EvaluationResult</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Result of evaluating a data point.</p> <p>Attributes:</p> Name Type Description <code>total_score</code> <code>int</code> <p>The total score of the data point.</p> <code>command_results</code> <code>list[CommandExecutionResult]</code> <p>The results of executing the commands.</p> <code>docker_compose_up_success</code> <code>bool</code> <p>Whether the docker compose up was successful.</p> <code>cypress_tests_success</code> <code>bool</code> <p>Whether the cypress tests were successful.</p> <code>cargo_test_success</code> <code>bool</code> <p>Whether the cargo test was successful.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.base.execute_multiple_commands","title":"<code>execute_multiple_commands(commands, environment)</code>","text":"<p>Execute multiple commands sequentially.</p> <p>Parameters:</p> Name Type Description Default <code>commands</code> <code>list[str]</code> <p>The commands to execute.</p> required <code>environment</code> <code>dict[str, str]</code> <p>The environment variables to use for the commands.</p> required <p>Returns:</p> Type Description <code>list[CommandExecutionResult]</code> <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the commands cannot be executed.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch","title":"<code>hecm.eval_harness.test_execution.juspay_hyperswitch</code>","text":""},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor","title":"<code>JuspayHyperswitchLocalTestExecutor</code>","text":"<p>               Bases: <code>BaseLocalExecutor</code></p> <p>Executor for Juspay Hyperswitch in the local environment.</p> <p>Example</p> <pre><code>from datasets import load_dataset\nfrom hecm.dataset_generation.schemas import CodingAgentDataPoint\nfrom hecm.eval_harness.agent import ClaudeCodeProxyAgent\nfrom hecm.eval_harness.test_execution import JuspayHyperswitchLocalTestExecutor\n\n\ndataset = load_dataset(\"juspay/hyperswitch\", split=\"train\")\ndata_point = CodingAgentDataPoint.model_validate(dataset[0])\nagent = ClaudeCodeProxyAgent()\nresponse = agent.get_agent_response(data_point, start_proxy=True, stop_proxy=True)\ntest_executor = JuspayHyperswitchLocalTestExecutor(\n    environment={\n        \"CYPRESS_CONNECTOR\": \"connector_id\",\n        \"CYPRESS_BASEURL\": \"http://localhost:8080\",\n        \"DEBUG\": \"cypress:cli\",\n        \"CYPRESS_ADMINAPIKEY\": \"admin_api_key\",\n        \"CYPRESS_CONNECTOR_AUTH_FILE_PATH\": \"/Users/geekyrakshit/Workspace/athena/hecm/creds.json\",\n    },\n)\ntest_executor.execute(\n    data_point,\n    predicted_patch=response.patch,\n    result_save_path=\"results.json\",\n)\n</code></pre> <p>Note</p> <p>This executor uses the local environment to execute the commands. It is not recommended to use this executor in a production environment. It is only recommended to use this executor for testing purposes. Right now, we're using <code>JuspayHyperswitchLocalTestExecutor</code> to avoid the complexity of running docker-in-docker containers.</p> <p>Parameters:</p> Name Type Description Default <code>environment</code> <code>dict[str, str]</code> <p>The environment variables to use for the commands.</p> <code>None</code> <code>cypress_test_suffix</code> <code>str</code> <p>The suffix to add to the cypress test command.</p> <code>':payments'</code> <code>health_check_url</code> <code>str</code> <p>The URL to check the health of the Hyperswitch.</p> <code>'http://localhost:8080/health'</code> <code>health_check_timeout</code> <code>int</code> <p>The timeout for the health check.</p> <code>720</code> <code>health_check_interval</code> <code>int</code> <p>The interval for the health check.</p> <code>5</code>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.clone_repository","title":"<code>clone_repository(data_point, repo_dir)</code>","text":"<p>Clone the repository for the given data point.</p> <p>Parameters:</p> Name Type Description Default <code>data_point</code> <code>CodingAgentDataPoint</code> <p>The data point to clone the repository for.</p> required <code>repo_dir</code> <code>str</code> <p>The directory to clone the repository to.</p> required <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the repository cannot be cloned.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.apply_patch","title":"<code>apply_patch(data_point, repo_dir, predicted_patch=None)</code>","text":"<p>Apply the patch for the given data point.</p> <p>Parameters:</p> Name Type Description Default <code>data_point</code> <code>CodingAgentDataPoint</code> <p>The data point to apply the patch for.</p> required <code>repo_dir</code> <code>str</code> <p>The directory to apply the patch to.</p> required <code>predicted_patch</code> <code>str | None</code> <p>The predicted patch to apply.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the patch cannot be applied.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.docker_compose_up","title":"<code>docker_compose_up(repo_dir)</code>","text":"<p>Start the docker compose for the given repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>str</code> <p>The directory to start the docker compose for.</p> required <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the docker compose cannot be started.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.docker_compose_down","title":"<code>docker_compose_down(repo_dir)</code>","text":"<p>Stop the docker compose for the given repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>str</code> <p>The directory to stop the docker compose for.</p> required <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the docker compose cannot be stopped.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.execute_cypress_tests","title":"<code>execute_cypress_tests(repo_dir)</code>","text":"<p>Execute the cypress tests for the given repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>str</code> <p>The directory to execute the cypress tests for.</p> required <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the cypress tests cannot be executed.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.execute_cargo_test","title":"<code>execute_cargo_test(repo_dir)</code>","text":"<p>Execute the cargo test for the given repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo_dir</code> <code>str</code> <p>The directory to execute the cargo test for.</p> required <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the cargo test cannot be executed.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.execute_commands","title":"<code>execute_commands(data_point, repo_dir, predicted_patch=None)</code>","text":"<p>Execute the commands for the given data point.</p> <p>Parameters:</p> Name Type Description Default <code>data_point</code> <code>CodingAgentDataPoint</code> <p>The data point to execute the commands for.</p> required <code>repo_dir</code> <code>str</code> <p>The directory to execute the commands for.</p> required <code>predicted_patch</code> <code>str | None</code> <p>The predicted patch to apply.</p> <code>None</code> <p>Returns:</p> Type Description <p>list[CommandExecutionResult]: The results of executing the commands.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the commands cannot be executed.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.execute","title":"<code>execute(data_point, predicted_patch=None, result_save_path=None)</code>","text":"<p>Execute the commands for the given data point.</p> <p>Parameters:</p> Name Type Description Default <code>data_point</code> <code>CodingAgentDataPoint</code> <p>The data point to execute the commands for.</p> required <code>predicted_patch</code> <code>str | None</code> <p>The predicted patch to apply.</p> <code>None</code> <code>result_save_path</code> <code>PathLike | None</code> <p>The path to save the results to.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>EvaluationResult</code> <code>EvaluationResult</code> <p>The evaluation result.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If the commands cannot be executed.</p>"},{"location":"api_reference/eval_harness/test_execution/#hecm.eval_harness.test_execution.juspay_hyperswitch.JuspayHyperswitchLocalTestExecutor.get_evaluation_result","title":"<code>get_evaluation_result()</code>","text":"<p>Get the evaluation result for the given data point.</p> <p>Returns:</p> Name Type Description <code>EvaluationResult</code> <code>EvaluationResult</code> <p>The evaluation result.</p>"}]}