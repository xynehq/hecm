from abc import ABC, abstractmethod

from pydantic import BaseModel

from hecm.dataset_generation.schemas import CodingAgentDataPoint


class AgentResponse(BaseModel):
    """
    Response from the agent.

    Attributes:
        patch (str): The patch generated by the agent.
        files_changed (list[str]): The files changed by the agent.
        success (bool): Whether the agent was successful.
        execution_time (float): The execution time of the agent.
        log_file (str): The log file of the agent.
        stdout (str): The stdout of the agent.
        stderr (str): The stderr of the agent.
        exit_code (int): The exit code of the agent.
    """

    patch: str
    files_changed: list[str]
    success: bool
    execution_time: float
    log_file: str
    stdout: str
    stderr: str
    exit_code: int


class BaseAgent(ABC):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    @abstractmethod
    def get_agent_response(self, data_point: CodingAgentDataPoint) -> AgentResponse:
        raise NotImplementedError(
            "Subclasses to `BaseAgent` must implement the `get_agent_response` method."
        )
